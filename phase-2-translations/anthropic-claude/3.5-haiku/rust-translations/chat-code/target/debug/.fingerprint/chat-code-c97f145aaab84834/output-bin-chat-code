{"$message_type":"diagnostic","message":"expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`","code":{"code":"E0525","explanation":"A closure was used but didn't implement the expected trait.\n\nErroneous code example:\n\n```compile_fail,E0525\nstruct X;\n\nfn foo<T>(_: T) {}\nfn bar<T: Fn(u32)>(_: T) {}\n\nfn main() {\n    let x = X;\n    let closure = |_| foo(x); // error: expected a closure that implements\n                              //        the `Fn` trait, but this closure only\n                              //        implements `FnOnce`\n    bar(closure);\n}\n```\n\nIn the example above, `closure` is an `FnOnce` closure whereas the `bar`\nfunction expected an `Fn` closure. In this case, it's simple to fix the issue,\nyou just have to implement `Copy` and `Clone` traits on `struct X` and it'll\nbe ok:\n\n```\n#[derive(Clone, Copy)] // We implement `Clone` and `Copy` traits.\nstruct X;\n\nfn foo<T>(_: T) {}\nfn bar<T: Fn(u32)>(_: T) {}\n\nfn main() {\n    let x = X;\n    let closure = |_| foo(x);\n    bar(closure); // ok!\n}\n```\n\nTo better understand how these work in Rust, read the [Closures][closures]\nchapter of the Book.\n\n[closures]: https://doc.rust-lang.org/book/ch13-01-closures.html\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4496,"byte_end":4514,"line_start":165,"line_end":165,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"    let next = Box::new(move |tup: &Tuple| {","highlight_start":25,"highlight_end":43}],"label":"this closure implements `FnMut`, not `Fn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":5338,"byte_end":5342,"line_start":192,"line_end":192,"column_start":16,"column_end":20,"is_primary":false,"text":[{"text":"    Operator { next, reset }","highlight_start":16,"highlight_end":20}],"label":"the requirement to implement `Fn` derives from here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":4688,"byte_end":4702,"line_start":172,"line_end":172,"column_start":13,"column_end":27,"is_primary":false,"text":[{"text":"            epoch_boundary = time + epoch_width;","highlight_start":13,"highlight_end":27}],"label":"closure is `FnMut` because it mutates the variable `epoch_boundary` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required for the cast from `Box<{closure@src/main.rs:165:25: 165:43}>` to `Box<(dyn for<'a> Fn(&'a HashMap<String, OpResult>) + 'static)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0525]\u001b[0m\u001b[0m\u001b[1m: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:165:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let next = Box::new(move |tup: &Tuple| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis closure implements `FnMut`, not `Fn`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            epoch_boundary = time + epoch_width;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mclosure is `FnMut` because it mutates the variable `epoch_boundary` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Operator { next, reset }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe requirement to implement `Fn` derives from here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for the cast from `Box<{closure@src/main.rs:165:25: 165:43}>` to `Box<(dyn for<'a> Fn(&'a HashMap<String, OpResult>) + 'static)>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0525`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0525`.\u001b[0m\n"}
